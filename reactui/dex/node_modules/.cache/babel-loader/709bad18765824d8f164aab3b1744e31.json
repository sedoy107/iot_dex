{"ast":null,"code":"/**\n * \n * Import web3 and dependencies\n * \n * \n * Connect to the development chain (Ganache chain @ 127.0.0.1:7545)\n * \n * \n * Read Dex contract abi and address\n */\nconst web3Init = async () => {\n  const Web3 = require('web3');\n\n  const fs = require('fs');\n\n  const web3 = await new Web3('http://127.0.0.1:7545');\n  const netId = await web3.eth.net.getId();\n  console.log(netId);\n  const dexJson = JSON.parse(fs.readFileSync('../build/contracts/Dex.json'));\n  const dexAbi = dexJson.abi;\n  const dexAddress = dexJson.networks[netId].address;\n  const dexContract = await new web3.eth.Contract(dexAbi, dexAddress);\n  console.log(dexContract);\n};","map":{"version":3,"sources":["/Users/noname/truffle/iot_dex/reactui/dex/src/components/AppWeb3.js"],"names":["web3Init","Web3","require","fs","web3","netId","eth","net","getId","console","log","dexJson","JSON","parse","readFileSync","dexAbi","abi","dexAddress","networks","address","dexContract","Contract"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMA,QAAQ,GAAG,YAAY;AAEzB,QAAMC,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,QAAMC,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAlB;;AAEA,QAAME,IAAI,GAAG,MAAM,IAAIH,IAAJ,CAAS,uBAAT,CAAnB;AACA,QAAMI,KAAK,GAAG,MAAMD,IAAI,CAACE,GAAL,CAASC,GAAT,CAAaC,KAAb,EAApB;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAYL,KAAZ;AAEA,QAAMM,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWV,EAAE,CAACW,YAAH,CAAgB,6BAAhB,CAAX,CAAhB;AACA,QAAMC,MAAM,GAAGJ,OAAO,CAACK,GAAvB;AACA,QAAMC,UAAU,GAAGN,OAAO,CAACO,QAAR,CAAiBb,KAAjB,EAAwBc,OAA3C;AAEA,QAAMC,WAAW,GAAG,MAAM,IAAIhB,IAAI,CAACE,GAAL,CAASe,QAAb,CAAsBN,MAAtB,EAA8BE,UAA9B,CAA1B;AAEAR,EAAAA,OAAO,CAACC,GAAR,CAAYU,WAAZ;AAEH,CAlBD","sourcesContent":["/**\n * \n * Import web3 and dependencies\n * \n * \n * Connect to the development chain (Ganache chain @ 127.0.0.1:7545)\n * \n * \n * Read Dex contract abi and address\n */\n\nconst web3Init = async () => {\n\n    const Web3 = require('web3')\n    const fs = require('fs')\n\n    const web3 = await new Web3('http://127.0.0.1:7545')\n    const netId = await web3.eth.net.getId()\n\n    console.log(netId)\n\n    const dexJson = JSON.parse(fs.readFileSync('../build/contracts/Dex.json'))\n    const dexAbi = dexJson.abi\n    const dexAddress = dexJson.networks[netId].address\n\n    const dexContract = await new web3.eth.Contract(dexAbi, dexAddress)\n\n    console.log(dexContract)\n\n}\n\n\n\n"]},"metadata":{},"sourceType":"module"}